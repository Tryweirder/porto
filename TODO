- full dump on sigsegv
- ? different log levels (error, normal, verbose)
- ? portoctl cp
- ? start portod in container -> need to parse mountinfo, not mounts (because mountinfo skips mounts outside of chroot)

# properties
- ? capabilities
- ? supplementary_groups
- ? umask
- ? autodestroy
- ? max_respawns
- ? cpu_cores - reserve some cores for a container

# portoinit
- ? portoctl run -f <MANIFEST> | <MANIFEST STRING>

# nekt0n
- add namespaces
- ? get rid of globals/static which have class types (http://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Static_and_Global_Variables)
- ? portoctl inpect to export everything in JSON

# network
- ? net_prio 0-7 -> 0-99

# phase 3
## disk
- ? bind_dns property
- update utmp
- root property to isolate fs (loop if file chroot if dir)
- ? readonly_root
- ? mount proc proc proc nodev,noexec,nosuid 0 0; run run tmpfs nodev,noexec,nosuid,relatime,size=1m,mode=0755 0 0; shm dev/shm tmpfs nodev,nosuid,noexec 0 0
  we can prepare everything when fs is isolated
- bind <host path> <container path>;
- restrict_sys - remount to readonly /proc/sys, /sys and mask over sysrq-trigger + /proc/irq and /proc/bus
- ? remount /sys (as we do with /proc) to hide things like /sys/class/net
## ipc
- ? isolate ipc property
## other
- ? when to enable user namespace
- ? devices c 1:3 rwm; c 1:5 rwm; c 1:9 rwm; c 1:8 rwm; c 136:* rwm; c 5:2 rwm
## net
- net:<none?|host|<dev>|bridge> - create veth pair and setup routing + masquerading + generate random ip/mask or use provided
- net_map: map host port to container when bridge used
- more on net: docker/docs/sources/articles/networking.md

# phase 2
- rt: create cgroup for non-smart tasks and throttle them
- ? use SO_PEERCRED to isolate parent containers from child in portod

# phase X
- ? kernel support for cgroup to limit allowed ports
- ? kernel support for cgroup coredump path

# cleanup
- remove extern AckExitStatus from container->Stop()
- rotate subprocess stdout/stderr
- move all 'extern "C"' into one file
