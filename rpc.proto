// Общение с демоном осуществляется через unix сокет /run/portod.socket.
// Сообщения отправляются/принимаются в виде delimited пакетов: сначала отправляется/принимается длина сообщения, затем само сообщение (http://stackoverflow.com/questions/2340730/are-there-c-equivalents-for-the-protocol-buffers-delimited-i-o-functions-in-ja, https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/MessageLite#writeDelimitedTo%28java.io.OutputStream%29).
// Тип отправляемого сообщения - TContainerRequest, тип принимаемого - TContainerResponse.

package rpc;

// Возможная ошибка в ответе
enum EError {
	// Запрос выполнен без ошибок
	Success = 0;
	// Неизвестная критическая ошибка
	Unknown = 1;
	// Неизвестный запрос
	InvalidMethod = 2;
	// Запрос на создание существующего контейнера
	ContainerAlreadyExists = 3;
	// Выполнение операции над несуществующим контейнером
	ContainerDoesNotExist = 4;
	// Неизвестное свойство
	InvalidProperty = 5;
	// Неизвестное runtime data
	InvalidData = 6;
	// Неверное значение свойств контейнера
	InvalidValue = 7;
	// Неверное состояние контейнера
	InvalidState = 8;
	// Свойство не может работать из-за старой версии ядра или других
	// компонент
	NotSupported = 9;
	// Невозможно гарантировать выделение запрошенных ресурсов
	ResourceNotAvailable = 10;
	// Недостаточно прав для выполнения операции
	Permission = 11;

	// Логический том уже существует
	VolumeAlreadyExists = 12;
	// Выполнение операции над несуществующим логическим томом
	VolumeNotFound = 13;
	// Недостаточно места для выполнения операции
	NoSpace = 14;
	// Контейнер или том используется
	Busy = 15;

	// Внутренний код. Ответ будет послан позже
	Queued = 1000;
}

// Запрос на создание контейнера
//
// При создании контейнера и последующей установке свойств не производится
// никаких проверок на доступность ресурсов.
message TContainerCreateRequest {
	// Имя контейнера
	required string name = 1;
}

// Запрос на удаление контейнера
message TContainerDestroyRequest {
	// Имя контейнера
	required string name = 1;
}

// Запрос на получение списка контейнеров
//
// Список содержит в себе созданные и запущенные контейнеры.
message TContainerListRequest {
}

// Запрос на получение свойства контейнера
message TContainerGetPropertyRequest {
	// Имя контейнера
	required string name = 1;
	// Свойство контейнера
	required string property = 2;
}

// Запрос на изменение свойства контейнера
message TContainerSetPropertyRequest {
	// Имя контейнера
	required string name = 1;
	// Свойство контейнера
	required string property = 2;
	// Значение свойства
	required string value = 3;
}

// Запрос runtime данных контейнера
message TContainerGetDataRequest {
	// Имя контейнера
	required string name = 1;
	// Runtime data контейнера
	required string data = 2;
}

// Запрос на запуск контейнера
message TContainerStartRequest {
	// Имя контейнера
	required string name = 1;
}

// Запрос на остановку контейнера
//
// После получения ответа на этот запрос все процессы контейнера будут
// гарантированно остановлены.
message TContainerStopRequest {
	// Имя контейнера
	required string name = 1;
}

// Запрос на приостановку контейнера
message TContainerPauseRequest {
	required string name = 1;
}

// Запрос на продолжение работы после приостановки контейнера
message TContainerResumeRequest {
	required string name = 1;
}

// Запрос на получение списка свойств
message TContainerPropertyListRequest {
}

// Запрос на получение списка runtime data
message TContainerDataListRequest {
}

// Послать сигнал контейнеру
message TContainerKillRequest {
	required string name = 1;
	required int32 sig = 2;
}

// Запросить версию демона
message TVersionRequest {
}

// Запрос на получение нескольких свойств/данных нескольких контейнеров
message TContainerGetRequest {
	// Список контейнеров, у которых надо получить свойства\данные
	repeated string name = 1;
	// Список свойтв\данных, которые надо получить у всех контейнеров
	repeated string variable = 2;
}

// Подождать, пока контейнер выполняется
message TContainerWaitRequest {
	// Список контейнеров
	repeated string name = 1;
	// Таймаут, ms
	optional uint32 timeout = 2;
}

// Сообщение-запрос
// В запросе может быть только одно опциональное сообщение, только оно
// и будет выполнено.
message TContainerRequest {
	optional TContainerCreateRequest create = 1;
	optional TContainerDestroyRequest destroy = 2;
	optional TContainerListRequest list = 3;
	optional TContainerGetPropertyRequest getProperty = 4;
	optional TContainerSetPropertyRequest setProperty = 5;
	optional TContainerGetDataRequest getData = 6;

	optional TContainerStartRequest start = 7;
	optional TContainerStopRequest stop = 8;
	optional TContainerPauseRequest pause = 9;
	optional TContainerResumeRequest resume = 10;
	optional TContainerPropertyListRequest propertyList = 11;
	optional TContainerDataListRequest dataList = 12;
	optional TContainerKillRequest kill = 13;
	optional TVersionRequest version = 14;
	optional TContainerGetRequest get = 15;
	optional TContainerWaitRequest wait = 16;

	optional TVolumePropertyListRequest listVolumeProperties = 103;
	optional TVolumeCreateRequest createVolume = 104;
	optional TVolumeLinkRequest linkVolume = 105;
	optional TVolumeUnlinkRequest unlinkVolume = 106;
	optional TVolumeListRequest listVolumes = 107;

	optional TLayerImportRequest importLayer = 110;
	optional TLayerRemoveRequest removeLayer = 111;
	optional TLayerListRequest listLayers = 112;
	optional TLayerExportRequest exportLayer = 113;
}

// Ответ на запрос списка контейнеров
message TContainerListResponse {
	// Список имен контейнеров
	repeated string name = 1;
}

// Ответ на запрос свойства контейнера
message TContainerGetPropertyResponse {
	// Значение свойства
	required string value = 1;
}

// Ответ на запрос runtime data контейнера
message TContainerGetDataResponse {
	// Значение runtime data
	required string value = 1;
}

// Ответ на запрос списка свойств
message TContainerPropertyListResponse {
	message TContainerPropertyListEntry {
		// Имя свойства
		required string name = 1;
		// Описание свойства
		required string desc = 2;
	}
	repeated TContainerPropertyListEntry list = 1;
}

// Ответ на запрос списка runtime data
message TContainerDataListResponse {
	message TContainerDataListEntry {
		// Имя runtime data
		required string name = 1;
		// Описание runtime data
		required string desc = 2;
	}
	repeated TContainerDataListEntry list = 1;
}

// Ответ на запрос версии
message TVersionResponse {
	// Тег версии
	required string tag = 1;
	// Ревизия версии
	required string revision = 2;
}

// Ответ на запрос нескольких свойств/данных контейнеров
message TContainerGetResponse {
	message TContainerGetValueResponse {
		required string variable = 1;
		optional EError error = 2;
		optional string errorMsg = 3;
		optional string value = 4;
	}
	message TContainerGetListResponse {
		required string name = 1;
		repeated TContainerGetValueResponse keyval = 2;
	}

	repeated TContainerGetListResponse list = 1;
}

message TContainerWaitResponse {
	required string name = 1;
}

// Сообщение-ответ
// В ответе будет присутствовать статус запроса (ошибка) и соответствующей
// запросу результат.
message TContainerResponse {
	required EError error = 1;
	// Опциональное сообщение об ошибке
	optional string errorMsg = 2;

	optional TContainerListResponse list = 3;
	optional TContainerGetPropertyResponse getProperty = 4;
	optional TContainerGetDataResponse getData = 5;
	optional TContainerPropertyListResponse propertyList = 6;
	optional TContainerDataListResponse dataList = 7;
	optional TVersionResponse version = 8;

	optional TVolumeListResponse volumeList = 9;
	optional TContainerGetResponse get = 10;
	optional TContainerWaitResponse wait = 11;
	optional TVolumePropertyListResponse volumePropertyList = 12;
	optional TVolumeDescription volume = 13;
	optional TLayerListResponse layers = 14;
}

// VolumeAPI

message TVolumeProperty {
	required string name = 1;
	required string value = 2;
}

message TVolumePropertyDescription {
	required string name = 1;
	required string desc = 2;
}

message TVolumeDescription {
	required string path = 1;
	repeated TVolumeProperty properties = 2;
	repeated string containers = 3;
}

// Запрос на получение списка свойств тома
message TVolumePropertyListRequest {
}

// Ответ на запрос списка свойств тома
message TVolumePropertyListResponse {
	repeated TVolumePropertyDescription properties = 1;
}

// Запрос на создание тома
message TVolumeCreateRequest {
	optional string path = 1;
	repeated TVolumeProperty properties = 2;
}

// Запрос на подсоединение тома к контейнеру
message TVolumeLinkRequest {
	required string path = 1;
	optional string container = 2;
}

// Запрос на отсоединение тома от контейнера
message TVolumeUnlinkRequest {
	required string path = 1;
	optional string container = 2;
}

// Запрос на получение списка томов
message TVolumeListRequest {
	optional string path = 1;
	optional string container = 2;
}

// Список томов с описанием
message TVolumeListResponse {
	repeated TVolumeDescription volumes = 1;
}

// Импорт overlayfs слоя
message TLayerImportRequest {
	required string layer = 1;
	required string tarball = 2;
	required bool merge = 3;
}

message TLayerExportRequest {
	required string volume = 1;
	required string tarball = 2;
}

// Удаление overlayfs слоя
message TLayerRemoveRequest {
	required string layer = 1;
}

message TLayerListRequest {
}

message TLayerListResponse {
	repeated string layer = 1;
}
