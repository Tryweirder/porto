#!/bin/sh

set -e

BINARY=$(basename $0)
usage() {
	echo "Usage: $BINARY [-d] [-v] <config>.conf"
	echo
	echo "Options:"
	echo -e "\t-d\tClear image before and after build (dry-run)"
	echo -e "\t-v\tShow underlying portoctl commands"
	exit 1
}

set -- `getopt dvh $*`
[ ! $? -eq 0 ] && { usage; }

NEED_CLEAR=0
VERBOSE=0
while [ ! "$1" = "--" ]; do
	case "$1" in
	-d)
		NEED_CLEAR=1
		;;
	-v)
		VERBOSE=1
		;;
	*)
		usage
		;;
	esac
	shift
done
shift

say() { tput setaf 3; echo "$@"; tput sgr0; }

CONFIG() {
	REPO=$(cd $(dirname $0)/../ && pwd)
	DIST=$REPO/dist
	USER=stfomichev
	ROOT=$DIST/${NAME}.loop
	TAR="$DIST/${NAME}.img"
	LOOP_SIZE=8G
	GET_TS=${ROOT}.get

	CLEAR() {
		[ $NEED_CLEAR -eq 1 ] || : && { rm -rf $ROOT $GET_TS; }
	}

	CLEAR

	pctl() {
		if [ $VERBOSE -eq 1 ]; then say portoctl "$@"; fi
		$REPO/portoctl "$@"

		## TODO: ask user to enter if fails
	}

	download_image() {
		[ -f $TAR ] || {
			say "Download $URL"
			(cd $DIST && curl -L $URL > $TAR)
		}
	}

	prepare_loop() {
		say "Prepare loop $ROOT"
		fallocate -l $LOOP_SIZE $ROOT
		mkfs.ext4 -F -F $ROOT
	}

	pexec() {
		pctl exec $NAME user="root" group="root" cwd="/" hostname="$NAME" "$@"
	}

	untar_image() {
		local loop_dir="/tmp/__root__"
		local tar_path="/tmp/__root_tar__"
		local new_root="/tmp/__root_dir__"

		pexec bind="$ROOT $loop_dir rw; $TAR $tar_path ro"  command="bash -c 'mkdir -p $new_root && mount $loop_dir $new_root && tar -xf $tar_path -C $new_root && sync'"
	}

	debootstrap() {
		local dist=$1
		shift
		local url=$1
		shift
		local args="$*"
		local loop_dir="/tmp/__root__"
		local tar_path="/tmp/__root_tar__"
		local new_root="/tmp/__root_dir__"

		say "debootstrap $args $dist $url"

		pexec bind="$ROOT $loop_dir rw"  command="bash -c 'mkdir -p $new_root && mount $loop_dir $new_root && cd $new_root && debootstrap $args $dist . $url && sync'"
	}

	clone() {
		local loop_dir="/tmp/__root__"
		local new_root="/tmp/__root_dir__"

		pexec bind="$ROOT $loop_dir rw" command="bash -c 'mkdir -p $new_root && mount $loop_dir $new_root && mkdir -p $new_root/src && cd $new_root/src && git clone $REPO . && git submodule init && git submodule update && sync'"
	}

	SIZE() {
		say "SIZE $1"
		LOOP_SIZE=$1
	}

	valid_ts() { test -f $1 && return 1 || return 0; }
	set_ts() { touch $1; }

	DEBOOTSTRAP() {
		say "DEBOOTSTRAP $*"

		if ! valid_ts $GET_TS; then return; fi

		prepare_loop
		debootstrap "$@"
		clone $ROOT/src
		set_ts  $GET_TS
	}

	GET() {
		say "GET $*"
		URL=$1

		if ! valid_ts $GET_TS; then return; fi

		download_image
		prepare_loop
		untar_image
		clone $ROOT/src
		set_ts  $GET_TS
	}

	RUN() {
		say "RUN $*"

		local tmp="$(mktemp)"
		echo "#!/bin/sh" > $tmp
		chmod +x $tmp

		pexec root="$ROOT" cwd="/src" command="$*" bind="$tmp /sbin/initctlk ro" env="DEBIAN_FRONTEND=noninteractive"
		rm $tmp
	}

	DEBUILD() {
		say "DEBUILD"

		stty sane
		pexec command="debuild -i -us -uc -b $*" root="${ROOT}" cwd="/src"
	}

	NOOP() {
		pexec root="$ROOT" command="bash -c 'echo \"#!/bin/sh\" > $1 && chmod +x $1 && sync'"
	}

	INSTALL() {
		say "INSTALL"

		RUN mkdir -p /boot/grub/
		RUN touch /boot/grub/menu.lst
		RUN apt-get install -y grub
		NOOP /sbin/update-grub
		NOOP /sbin/update-initramfs

		RUN apt-get install -y --force-yes linux-image-server linux-image-3.10.59-19 linux-firmware wireless-crda crda libnl-3-200 libnl-genl-3-200 wireless-regdb linux-tools linux-headers-3.10.59-19 kexec-tools anacron makedumpfile libdw1

		RUN apt-get install -y --force-yes logrotate
		RUN groupadd porto || :
		RUN dpkg -i /yandex-porto_*_amd64.deb
		RUN apt-get install -y --force-yes python-central python-protobuf
		RUN dpkg -i /python-portopy_*_all.deb

		# make sure package is installed
		for binary in portod portoctl portotest; do
			RUN which $binary || { echo "ERROR: Can't find $binary"; exit 1; }
		done
	}

	SELFTEST() {
		say "SELFTEST"

		pexec command="./portod --stdlog --failsafe" root="${ROOT}" cwd="/src"
	#	pctl run porto command="./portod" root="${ROOT}" cwd="/src"
	#	pctl exec porto/selftest command="./portotest" root="${ROOT}" cwd="/src"
	#	pctl destroy porto
	}
}

CP() {
	say "COPY $1 -> $2"

	local copy_bind="/tmp/__copy_me__"
	pexec root="$ROOT" command="cp $copy_bind $2" bind="$1 $copy_bind ro" bind_dns=false
}

ECHO() {
	say "ECHO $1"

	local file="$1"
	local tmp="$(mktemp)"
	cat > $tmp
	CP $tmp $file
	rm $tmp
}

REPO() {
	say "REPO $1 $2"

	local file="$1"
	shift
	local url="$1"
	shift

	local tmp="$(mktemp)"
	echo > $tmp
	for repo in "$@"; do
		echo "deb $url $repo" >> $tmp
	done

	CP $tmp /etc/apt/sources.list.d/$file
	rm $tmp
}

if [ $# -ge 1 ]; then
	for conf in "$@"; do
		NAME=$(echo $(basename $conf) | sed -e 's/.conf$//')
		if [ -z "$conf" ]; then
			echo "Invalid config name: $NAME ($conf)"
			exit 1
		fi
		CONFIG $NAME

		file="$conf"
		if [ -f "./$conf" ]; then file="./$conf"; fi
		. $file
	done
else
	for conf in ./*.conf; do
		echo "Using config $conf"
		. $conf
		CLEAR
	done
fi
