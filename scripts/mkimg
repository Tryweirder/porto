#!/bin/sh

set -e

BINARY=$(basename $0)
usage() {
	echo "Usage: $BINARY [-v] <size> <image> <config>"
	echo "Options:"
	echo -e "\t-T\tDon't create tar archive"
	echo -e "\t-c\tExecute check hook"
	echo -e "\t-d\tRemove image after build (dry-run)"
	echo -e "\t-v\tShow underlying portoctl commands"
	exit 1
	exit 1
}

set -- `getopt c:dTvh $*`
[ ! $? -eq 0 ] && usage

CHECK=
TAR=1
VERBOSE=0
CLEANUP=0
while [ ! "$1" = "--" ]; do
	case "$1" in
	-c)
		CHECK=$2
		shift
		;;
	-d)
		CLEANUP=1
		;;
	-T)
		TAR=0
		;;
	-v)
		VERBOSE=1
		;;
	*)
		usage
		;;
	esac
	shift
done
shift

[ $# -eq 3 ] || usage
SIZE=$1
IMAGE=$2
CONF=$(realpath $3)
CONTAINER=$BINARY
ALLOWED_DEVICES="c 1:3 rwm; c 1:5 rwm; c 1:7 rwm; c 1:9 rwm; c 1:8 rwm; c 136:* rw; c 5:2 rwm; c 254:0 rm; c 10:237 rmw; b 7:* rmw"

chmod +x $CONF

say() { tput setaf 3; echo "$@"; tput sgr0; }

pctl() {
	[ $VERBOSE -eq 0 ] || say portoctl "$@"
	portoctl "$@"
}

allocate_image() {
	local image=$1
	local size=$2

	fallocate -l $size $image
	mkfs.ext4 -F -F $image
}

bootstrap() {
	local image=$1
	local conf=$2

	local tmpdir=$(mktemp -d)
	pctl exec $CONTAINER command="bash -c 'mount $image $tmpdir && $conf bootstrap $tmpdir; ret=$?; umount $image; exit $ret'" user=root group=root bind_dns=false #root_readonly=true debootsrap chroot fails
	rmdir $tmpdir
}

check() {
	pctl exec ${CONTAINER}/check command="/bin/bash -c 'mkdir /src && /config check /host_porto /src'" isolate="false" user=root group=root
}

prepare() {
	local image=$1
	local conf=$2
	local porto=$3

	local bind_selinux=""
	[ ! -d /sys/fs/selinux ] || bind_selinux="/sys/fs/selinux /sys/fs/selinux ro"
	local bind_porto=""
	[ -z "$porto" ] || bind_porto="$porto /host_porto ro"

	pctl run $CONTAINER command="/sbin/init" root="$image" hostname="$CONTAINER" user=root group=root bind="$conf /config ro; $bind_selinux; $bind_porto" bind_dns=false allowed_devices="$ALLOWED_DEVICES"

	pctl exec ${CONTAINER}/prepare command="bash -c '/config prepare'" isolate=false user=root group=root
	pctl exec ${CONTAINER}/sync command="bash -c 'sync'" isolate="false" user=root group=root

	[ -z "$CHECK" ] || check

	pctl destroy $CONTAINER
}

pctl destroy $CONTAINER || :
allocate_image $IMAGE $SIZE
IMAGE=$(realpath $IMAGE)
bootstrap $IMAGE $CONF
prepare $IMAGE $CONF $CHECK
[ $TAR -eq 0 ] || tar cSf ${IMAGE}.tar $IMAGE
[ $CLEANUP -eq 0 ] || rm $IMAGE
