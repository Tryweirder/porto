#!/bin/sh

set -e

BINARY=$(basename $0)
usage() {
	echo "Usage: $BINARY [options] <size> <image> <config>"
	echo "Options:"
	echo -e "\t-T\tDon't create tar archive"
	echo -e "\t-c\tExecute check hook"
	echo -e "\t-d\tRemove image after build (dry-run)"
	echo -e "\t-v\tShow underlying portoctl commands"
	echo -e "\t-C\tDon't destroy porto containers on failure (for debugging)"
	exit 1
	exit 1
}

OPTS="c:dCTvh"
getopt -Qq $OPTS $* || usage
set -- $(getopt $OPTS $*)

CHECK=
TAR=1
VERBOSE=0
DRYRUN=0
CLEANUP=0
while [ ! "$1" = "--" ]; do
	case "$1" in
	-c)
		CHECK=$2
		shift
		;;
	-C)
		CLEANUP=1
		;;
	-d)
		DRYRUN=1
		;;
	-T)
		TAR=0
		;;
	-v)
		VERBOSE=1
		;;
	*)
		usage
		;;
	esac
	shift
done
shift

[ $# -lt 3 ] && usage || :
SIZE=$1
IMAGE=$2
CONF=$(realpath $3)
[ ! -z "$4" ] && CUSTOM=$(realpath $4) || CUSTOM=
CONTAINER=$BINARY
ALLOWED_DEVICES="c 1:3 rwm; c 1:5 rwm; c 1:7 rwm; c 1:9 rwm; c 1:8 rwm; c 136:* rw; c 5:2 rwm; c 254:0 rm; c 10:237 rmw; b 7:* rmw"

chmod +x $CONF
[ -z "$CUSTOM" ] || chmod +x $CUSTOM

IFACE=$(ip link | grep '[^@]eth[0-9]' | grep -w UP | cut -d: -f2 | tr -d ' ')

say() {
	[ ! -t 1 ] || tput setaf 3
	echo "$@"
	[ ! -t 1 ] || tput sgr0
}

TMPDIR=$(mktemp -d)
cleanup() {
	pexec iptables -t nat -D POSTROUTING -o $IFACE -j MASQUERADE || :
	[ ! -d $TMPDIR ] || { umount $TMPDIR || :; rmdir $TMPDIR ||:; }
	[ $CLEANUP -eq 0 ] && pctl destroy $CONTAINER || :
}

trap cleanup EXIT

pctl() {
	[ $VERBOSE -eq 0 ] || say portoctl "$@"
	portoctl "$@"
}

pexec() { pctl exec ${CONTAINER}-sudo command="/bin/bash -c '$*'" user="root" group="root"; }

allocate_image() {
	local image=$1
	local size=$2

	fallocate -l $size $image || dd if=/dev/zero of=$image bs=1 count=1 seek=$size
	mkfs.ext4 -F -F $image
}

bootstrap() {
	local image=$1
	local conf=$2

	pctl exec $CONTAINER command="bash -c 'mount $image $TMPDIR && $conf bootstrap $TMPDIR'" user=root group=root bind_dns=false env="DEBIAN_FRONTEND=noninteractive" #root_readonly=true debootsrap chroot fails
}

check() {
	pctl exec ${CONTAINER}/check command="/bin/bash -c 'mkdir /src && /config check /host_porto /src'" isolate="false" user=root group=root env="DEBIAN_FRONTEND=noninteractive"
}

BIND_PROPERTY=""
[ ! -d /sys/fs/selinux ] || BIND_PROPERTY="${BIND_PROPERTY}; /sys/fs/selinux /sys/fs/selinux ro"
[ -z "$CHECK" ] || BIND_PROPERTY="${BIND_PROPERTY}; $CHECK /host_porto ro"
[ -z "$CUSTOM" ] || BIND_PROPERTY="${BIND_PROPERTY}; $CUSTOM /custom_config ro"


prepare() {
	local image=$1
	local conf=$2
	local custom=$3

	pexec sysctl net.ipv4.ip_forward=1
	pexec ip link delete veth0 || :
	pexec ip link add veth0 type veth peer name veth1
	pexec ip link set veth0 up
	pexec ip addr add 192.168.1.2/24 dev veth0

	pexec iptables -t nat -D POSTROUTING -o $IFACE -j MASQUERADE || :
	pexec iptables -t nat -A POSTROUTING -o $IFACE -j MASQUERADE

	pctl run $CONTAINER command="/sbin/init" root="$image" hostname="$CONTAINER" user=root group=root bind="$conf /config ro; $BIND_PROPERTY; /sys/fs/cgroup /sys/fs/cgroup ro" bind_dns=false allowed_devices="$ALLOWED_DEVICES" net="host veth1" default_gw="192.168.1.2" ip="veth1 192.168.1.1/24"

	pctl exec ${CONTAINER}/prepare command="bash -c '/config prepare'" isolate=false user=root group=root env="DEBIAN_FRONTEND=noninteractive"
	[ -z "$custom" ] || pctl exec ${CONTAINER}/prepare command="bash -c '/custom_config'" isolate=false user=root group=root env="DEBIAN_FRONTEND=noninteractive"
	pctl exec ${CONTAINER}/prepare command="bash -c '/config cleanup'" isolate=false user=root group=root env="DEBIAN_FRONTEND=noninteractive"
	pctl exec ${CONTAINER}/sync command="bash -c 'sync'" isolate="false" user=root group=root env=" DEBIAN_FRONTEND=noninteractive"
}

pctl destroy $CONTAINER || :
allocate_image $IMAGE $SIZE
IMAGE=$(realpath $IMAGE)
bootstrap $IMAGE $CONF
prepare $IMAGE $CONF $CUSTOM
[ -z "$CHECK" ] || check
cleanup
[ $TAR -eq 0 ] || (cd $(dirname ${IMAGE}) && tar cSf ${IMAGE}.tar $(basename $IMAGE))
[ $DRYRUN -eq 0 ] || rm $IMAGE
