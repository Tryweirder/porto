#!/bin/sh

set -e

ROOTDIR=$(cd $(dirname $0)/../ && pwd)

say() { [ ! -t 1 ] || tput setaf 3; echo "$@"; [ ! -t 1 ] || tput sgr0; }

update_config() {
	echo "log { verbose: true } network { enabled: $1 dynamic_ifaces: $2 } container { use_hierarchy: true empty_wait_timeout_ms: 1000 } privileges { root_user: \"$USER\" restricted_root_user: \"daemon\" } volumes { enabled: true }" > /etc/portod.conf
}

selftest() {
	say "Self test with network=$1"
	update_config true true
	portotest "$@"
}

stresstest() {
	say "Stress test"
	update_config true true
	portotest stress "$@"
}

pkgtest() {
	say "Package test"
	mkdir -p /place
	for f in $ROOTDIR/dist/*.conf; do
		img=/place/$(basename $f).img
		touch $img
		$ROOTDIR/scripts/mkimg 5G $img $f -vTd -c $ROOTDIR
	done
}

HOST=kernel1.search.yandex.net
PORT=8080

IFACES=$(ip l | grep -w 'eth.' | awk '{print $2}' | tr -d ':')

getrate() {
	local guarantee=$1
	local ceil=$2

	local prop=""
	for iface in $IFACES; do
		[ -z "$guarantee" ] || prop="$prop net_guarantee[$iface]=$guarantee"
		[ -z "$ceil" ] || prop="$prop net_limit[$iface]=$ceil"
	done

	#say "Use limits:$prop" >&2

	printf '%.0f' $(portoctl exec iperf-$guarantee-$ceil command="iperf -c $HOST -p $PORT" $prop | grep '/sec' | awk '{print $5}' 2>/dev/null)
}

expect() {
	local what=$1
	local min=$2
	local max=$3

	if [ $what -lt $min -o $what -gt $max ]; then
		say "- unexpected $min < $what < $max"
		exit 1
	else
		say "- rate $what"
	fi
}

nettest() {
	# ssh kernel1 iperf -s -p 8080

	say "THE FOLLOWING TEST ASSUMES 100MBIT LINK"

	say "Single container with default limits"
	expect $(getrate 1) 90 120

	say "1MB/s ceil"
	expect $(getrate 1 $(echo '1 * 1024 * 1024' | bc)) 8 16

	local a_g=$(echo "100 * 1024 * 1024" | bc)

	say "$a_g guarantee"
	local a_out=$(mktemp)
	local b_out=$(mktemp)

	getrate $a_g > $a_out &
	getrate 1 > $b_out &

	wait
	wait

	a_rate=$(cat $a_out)
	b_rate=$(cat $b_out)
	rm $a_out $b_out

	say "- rate with guarantee $a_rate, without $b_rate"
	if [ $a_rate -lt $b_rate ]; then
		say "- unexpected $a_rate > $b_rate"
		exit 1
	fi

	local a_l=$(echo "1 * 1024 * 1024" | bc)
	say "$a_l limit"
	local a_out=$(mktemp)
	local b_out=$(mktemp)

	getrate 1 $a_l > $a_out &
	getrate 1 > $b_out &

	wait
	wait

	a_rate=$(cat $a_out)
	b_rate=$(cat $b_out)
	rm $a_out $b_out

	expect $a_rate 0 16
	expect $b_rate 16 120
}

mvlantest() {
	local iface=eth1
	local container_suffix=50
	local host_suffix=60

	local host_net=$(ip addr show dev $iface | grep -w inet | awk '{print $2}')
	local host_ip=$(echo $host_net | cut -d'/' -f 1)
	local host_mask=$(echo $host_net | cut -d'/' -f 2)
	local container_ip=$(echo $host_ip | sed "s/\([0-9]*\.[0-9]*\.[0-9]*\).*/\1.$container_suffix/")
	local macvlan_ip=$(echo $host_ip | sed "s/\([0-9]*\.[0-9]*\.[0-9]*\).*/\1.$host_suffix/")
	#local macvlan_ip=$host_ip
	local default_gw=$(ip -o route | grep default | awk '{print $3}')

	#ip link del macvlan0 || :
	#ip link add link $iface name macvlan0 type macvlan
	#ip link set dev macvlan0 up
	#ip addr add $macvlan_ip/$host_mask dev macvlan0

	portoctl exec ping command="ping $host_ip" net="macvlan $iface eth0" ip="eth0 $container_ip/$host_mask" default_gw="$default_gw"
}

fixcg() {
	# make current task belongs to root cgroups
	for cg in /sys/fs/cgroup/*; do
		echo $$ | sudo tee $cg/cgroup.procs &>/dev/null;
	done
}

fixcg

[ ! $# -eq 0 ] || set -- self pkg stress
for t in "$@"; do
	case $t in
		self) selftest ; exit ;;
		selfargs) selftest "$@" ; exit ;;
		stress) stresstest ;;
		stressargs) shift; stresstest "$@"; exit $? ;;
		pkg) pkgtest ;;
		net) nettest ;;
		macvlan) mvlantest ;;
		nop) : ;;
		script) shift; eval "$@"; exit ;;
		*) say "Invalid test $t"; exit 1 ;;
	esac
done
